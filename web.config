<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="Handle History Mode and custom 404/500" stopProcessing="true">
          <match url="(.*)" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="/" />
        </rule>
      </rules>
    </rewrite>
    <httpProtocol>
      <customHeaders>
        <!-- Protects against Clickjacking attacks. ref.: https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet -->
        <add name="Strict-Transport-Security" value="max-age=31536000"/>

        <!-- CSP modern XSS directive-based defence, used since 2014. ref.: http://content-security-policy.com/ -->
        <add name="Content-Security-Policy" value="
             default-src 'unsafe-inline' 'self' * salesiq.zoho.com; 
             script-src 'self' 'unsafe-inline'  https://jquery.com 'unsafe-eval' *.stripe.com *.freshchat.com salesiq.zoho.com  *.zohocdn.com *.zohopublic.com  *.zohostatic.com  *.cloudfront.net blob:;
             script-src-elem 'unsafe-inline' 'self' *; 
             style-src 'unsafe-inline' 'self' * css.zohocdn.com zohopublic.com; 
             style-src-elem 'unsafe-inline' 'self' *; 
             font-src 'self' data: * fonts.zohostatic.com;
             img-src * 'self' blob: data: https: img.zohostatic.com;
             object-src 'self' *;
             media-src 'self' media.zohostatic.com"
        />

        <!-- Protects against Clickjacking attacks. ref.: http://stackoverflow.com/a/22105445/1233379 -->
        <add name="X-Frame-Options" value="SAMEORIGIN"/>

        <!-- Protects against MIME-type confusion attack. ref.: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/ -->
        <add name="X-Content-Type-Options" value="nosniff" />

        <!-- Prevents from leaking referrer data over insecure connections. ref.: https://scotthelme.co.uk/a-new-security-header-referrer-policy/ -->
        <add name="Referrer-Policy" value="strict-origin" />

        <!-- Protects against XSS injections. ref.: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/ -->
        <add name="X-XSS-Protection" value="1; mode=block" />

        <add name="Permissions-Policy" value='fullscreen=(self "https://player.vimeo.com")'/>

        <remove name="X-Powered-By" />
        <remove name="X-AspNetVersion" />
        <remove name="X-AspNetMvcVersion" />
      </customHeaders>

    </httpProtocol>
    <security>
      <requestFiltering>
        <verbs allowUnlisted="false">
          <clear />
          <add verb="GET" allowed="true" />
          <add verb="HEAD" allowed="true" />
          <add verb="POST" allowed="true" />
        </verbs>
        <requestLimits maxQueryString="2048" maxUrl="4096" maxAllowedContentLength="30000000">
          <headerLimits>
            <add header="Content-type" sizeLimit="100" />
          </headerLimits>
        </requestLimits>
      </requestFiltering>
    </security>
    <staticContent>
      <mimeMap fileExtension="webp" mimeType="image/webp" />
    </staticContent>
  </system.webServer>
</configuration>